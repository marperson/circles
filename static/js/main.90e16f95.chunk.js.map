{"version":3,"sources":["CirclesGame.js","Canvas.js","App.js","serviceWorker.js","theme.js","index.js"],"names":["CirclesGame","props","this","xPos","yPos","xVelocity","yVelocity","score","drawScore","x","y","key","command","init","timeSinceLastAnimation","ctx","canvas","fillStyle","fillRect","width","height","fillText","Math","round","canvasRef","React","createRef","animate","bind","method","current","getContext","that","keysPressed","document","addEventListener","event","window","e","rect","getBoundingClientRect","handleMouseClick","clientX","left","clientY","top","touch","targetTouches","lastTime","requestAnimationFrame","loop","time","innerWidth","innerHeight","Object","keys","forEach","handleKeyPressed","save","restore","id","ref","Component","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","App","useRef","useState","setScore","classes","Fragment","AppBar","position","style","background","boxShadow","Toolbar","IconButton","edge","className","color","aria-label","Typography","variant","Button","onClick","action","Boolean","location","hostname","match","createMuiTheme","overrides","MuiCssBaseline","body","margin","ReactDOM","render","ThemeProvider","CssBaseline","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8VAEqBA,G,wDACnB,WAAaC,GAAQ,uCACbA,G,mDAINC,KAAKC,KAAM,IACXD,KAAKE,KAAM,IACXF,KAAKG,UAAW,EAChBH,KAAKI,UAAW,EAChBJ,KAAKK,MAAO,EACZL,KAAKM,UAAUN,KAAKK,S,uCAGJE,EAAGC,GACnBR,KAAKC,KAAOM,EACZP,KAAKE,KAAOM,EACZR,KAAKM,YAAcN,KAAKK,S,uCAGTI,GACf,OAAOA,GACL,IAAK,IACL,IAAK,YACHT,KAAKG,YACL,MACF,IAAK,IACL,IAAK,UACHH,KAAKI,YACL,MACF,IAAK,IACL,IAAK,YACHJ,KAAKI,YACL,MACF,IAAK,IACL,IAAK,aACHJ,KAAKG,e,6BAKJO,GACU,YAAZA,GACDV,KAAKW,S,8BAIDC,EAAwBC,EAAKC,GACnCD,EAAIE,UAAY,YAChBF,EAAIG,SAAS,EAAE,EAAGF,EAAOG,MAAOH,EAAOI,QACvCL,EAAIE,UAAY,OAChBF,EAAIG,SAAShB,KAAKC,KAAK,GAAID,KAAKE,KAAK,GAAI,GAAI,IAC7CF,KAAKC,MAAOD,KAAKG,UAAU,GAC3BH,KAAKE,MAAOF,KAAKI,UAAU,GACxBJ,KAAKC,KAAMa,EAAOG,QACnBjB,KAAKC,KAAK,GACTD,KAAKE,KAAMY,EAAOI,SACnBlB,KAAKE,KAAK,GACTF,KAAKC,KAAO,IACbD,KAAKC,KAAKa,EAAOG,OAChBjB,KAAKE,KAAM,IACZF,KAAKE,KAAKY,EAAOI,QACnBL,EAAIM,SAAJ,eAAqBC,KAAKC,MAAM,IAAOT,IAA4B,GAAIE,EAAOI,OAAQ,Q,qDC3DxF,WAAanB,GAAQ,IAAD,8BAClB,cAAMA,IACDuB,UAAYC,IAAMC,YACvB,EAAKC,QAAQC,KAAb,gBAHkB,E,sDAOVrB,IAERsB,EADa3B,KAAKD,MAAL,UACNM,K,0CAOP,IAAMS,EAASd,KAAKsB,UAAUM,QACxBf,EAAMC,EAAOe,WAAW,MAC1BC,EAAO9B,KAEPiB,EAAQH,EAAOG,MACfC,EAASJ,EAAOI,OAWpB,IAAIa,EAAc,GAClBC,SAASC,iBAAiB,WAAW,SAACC,GACpCH,EAAYG,EAAMzB,MAAO,KAE3BuB,SAASC,iBAAiB,SAAS,SAACC,UAC3BH,EAAYG,EAAMzB,QAG3B0B,OAAOF,iBAAiB,aAAa,SAASG,GAC5C,IAAMC,EAAOvB,EAAOwB,wBACpBR,EAAKS,iBAAkBH,EAAEI,QAAUH,EAAKI,KAAML,EAAEM,QAAUL,EAAKM,QAEjER,OAAOF,iBAAiB,aAAa,SAASG,GAC5C,IAAMC,EAAOvB,EAAOwB,wBACdM,EAAQR,EAAES,cAAc,GAC9Bf,EAAKS,iBAAkBK,EAAMJ,QAAUH,EAAKI,KAAMG,EAAMF,QAAUL,EAAKM,QACtE,GAEH,IAAIG,EAAU,EAmBdC,uBAjBA,SAASC,EAAMC,GACb,IAAMrC,EAAyBqC,EAAKH,EACpCA,EAAWG,EACPhC,IAAUkB,OAAOe,YAAchC,IAAWiB,OAAOgB,cA7BrDrC,EAAOG,MAAQkB,OAAOe,WACtBpC,EAAOI,OAASiB,OAAOgB,YACvBlC,EAAQH,EAAOG,MACfC,EAASJ,EAAOI,QA8BhBkC,OAAOC,KAAKtB,GAAauB,SAAS,SAAC7C,GAAD,OAASqB,EAAKyB,iBAAiB9C,MAEjEI,EAAI2C,OAEJ1B,EAAKL,QAAQb,EAAwBC,EAAKC,GAE1CD,EAAI4C,UAEJV,sBAAsBC,MAGxBhD,KAAKW,S,uEAOUJ,EAAGC,M,uCAGHC,M,6BAGVC,M,8BAGCE,EAAwBC,EAAKC,M,+BAInC,OACI,4BAAQ4C,GAAG,SAASC,IAAK3D,KAAKsB,gB,GA5FFC,IAAMqC,aCMpCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7B/D,MAAO,CACL8D,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OA+CCK,MA1Cf,WAEE,IAAMhD,EAAYiD,iBAAO,MAFZ,EAGaC,mBAAS,GAHtB,mBAGNnE,EAHM,KAGCoE,EAHD,KAcPC,EAAUb,IAMhB,OACE,kBAAC,IAAMc,SAAP,KACA,kBAAC,EAAD,CAAahB,IAAKrC,EAAWmD,SAAUA,IACvC,kBAACG,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAO,CAAEC,WAAY,cAAeC,UAAW,SACvE,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,UAAWV,EAAQR,WAAYmB,MAAM,UAAUC,aAAW,QACnF,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKH,MAAM,UAAWD,UAAWV,EAAQL,OAA7D,WAGA,kBAACkB,EAAA,EAAD,CAAYC,QAAQ,KAAKH,MAAM,UAAWD,UAAWV,EAAQrE,OAA7D,UACUA,GAEV,kBAACoF,EAAA,EAAD,CAAQD,QAAQ,WAAWH,MAAM,UAAUK,QAlB7C,WACEpE,EAAUM,QAAQ+D,OAAO,aAiBzB,qBChDgBC,QACW,cAA7BzD,OAAO0D,SAASC,UAEe,UAA7B3D,OAAO0D,SAASC,UAEhB3D,OAAO0D,SAASC,SAASC,MACvB,2D,kBCDShC,EAdDiC,YAAe,CACzBC,UAAW,CACPC,eAAgB,CACd,UAAW,CACTC,KAAM,CACFlF,MAAO,OACPC,OAAQ,OACRkF,OAAQ,UCDxBC,IAASC,OACP,kBAACC,EAAA,EAAD,CAAexC,MAAOA,GAEpB,kBAACyC,EAAA,EAAD,MACA,kBAAC,EAAD,OAEFxE,SAASyE,cAAc,UFoHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.90e16f95.chunk.js","sourcesContent":["import Canvas from './Canvas';\n\nexport default class CirclesGame extends Canvas {\n  constructor (props) {\n    super(props);\n  }\n\n  init(){\n    this.xPos =100;\n    this.yPos =100;\n    this.xVelocity =0;\n    this.yVelocity =0;\n    this.score =0;\n    this.drawScore(this.score);\n  }\n\n   handleMouseClick(x, y){\n    this.xPos = x;\n    this.yPos = y;\n    this.drawScore( ++ this.score );\n  }\n\n  handleKeyPressed(key){\n    switch(key){\n      case 'a':\n      case 'ArrowLeft':\n        this.xVelocity--;\n        break;\n      case 'w':\n      case 'ArrowUp':\n        this.yVelocity--;\n        break;\n      case 's':\n      case 'ArrowDown':\n        this.yVelocity++;\n        break;\n      case 'd':\n      case 'ArrowRight':\n        this.xVelocity++;\n        break;\n    }\n  }\n\n  action(command){\n    if(command === \"restart\"){\n      this.init();\n    }\n  }\n\n  animate(timeSinceLastAnimation, ctx, canvas){\n    ctx.fillStyle = 'lightGray';\n    ctx.fillRect(0,0, canvas.width, canvas.height);\n    ctx.fillStyle = 'blue';\n    ctx.fillRect(this.xPos-25, this.yPos-25, 50, 50);\n    this.xPos+= this.xVelocity/10;\n    this.yPos+= this.yVelocity/10;\n    if(this.xPos> canvas.width)\n      this.xPos=0;\n    if(this.yPos> canvas.height)\n      this.yPos=0;\n    if(this.xPos < 0)\n      this.xPos=canvas.width;\n    if(this.yPos <0)\n      this.yPos=canvas.height;\n    ctx.fillText(`FPS: ${Math.round(1000 / timeSinceLastAnimation)}` , 10, canvas.height -30);\n  }\n}\n","import React from 'react';\n\nimport './Canvas.css';\n\nexport default class Canvas extends React.Component {\n  constructor (props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.animate.bind(this);\n\n  }\n\n  drawScore(score){\n    var method = this.props['setScore'];\n    method(score);\n  }\n\n  componentDidMount () {\n    //add keyboard listener\n    //add mouse listener\n\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    var that = this;\n  \n    var width = canvas.width;\n    var height = canvas.height;\n    // If window size is changed this is called to resize the canvas\n    // It is not called via the resize event as that can fire to often and\n    // debounce makes it feel sluggish so is called from main loop.\n    function resizeCanvas () {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      width = canvas.width;\n      height = canvas.height;\n    }\n\n    let keysPressed = {};\n    document.addEventListener('keydown', (event) => {\n      keysPressed[event.key] = true;\n    });\n    document.addEventListener('keyup', (event) => {\n      delete keysPressed[event.key];\n   });\n\n    window.addEventListener('mousedown', function(e) {\n      const rect = canvas.getBoundingClientRect()\n      that.handleMouseClick( e.clientX - rect.left, e.clientY - rect.top )\n    });\n    window.addEventListener(\"touchmove\", function(e){\n      const rect = canvas.getBoundingClientRect();\n      const touch = e.targetTouches[0];\n      that.handleMouseClick( touch.clientX - rect.left, touch.clientY - rect.top )\n    }, false);\n\n    var lastTime =0;\n    \n    function loop (time) {\n      const timeSinceLastAnimation = time-lastTime;\n      lastTime = time;\n      if (width !== window.innerWidth || height !== window.innerHeight) {\n        resizeCanvas();\n      }\n\n      Object.keys(keysPressed).forEach( (key) => that.handleKeyPressed(key));\n\n      ctx.save(); //Freeze redraw\n      \n      that.animate(timeSinceLastAnimation, ctx, canvas); \n      \n      ctx.restore();//now do redraw\n\n      requestAnimationFrame(loop);\n    }\n    requestAnimationFrame(loop);\n    this.init();\n  }\n\n  init(){\n\n  }\n\n  handleMouseClick(x, y){\n  }\n\n  handleKeyPressed(key){\n  }\n\n  action(command){\n  }\n\n  animate(timeSinceLastAnimation, ctx, canvas){\n  }\n\n  render () {\n    return (\n        <canvas id='Canvas' ref={this.canvasRef} />\n    );\n  }\n}\n","import React,  { useRef, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CirclesGame from './CirclesGame';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  score: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\n\nfunction App() {\n  \n  const canvasRef = useRef(null);\n  const [score, setScore] = useState(0);\n\n  // const handleCanvasClick=(event)=>{\n  //   // on each click get current mouse location \n  //   const rect = canvasRef.current.getBoundingClientRect()\n\n  //   const currentCoord = { x: event.clientX - rect.left, y: event.clientY - rect.top};\n  //   // add the newest mouse location to an array in state \n  //   setCoordinates([...coordinates, currentCoord]);\n  // };\n\n  const classes = useStyles();\n\n  function handleRestart() {\n    canvasRef.current.action(\"restart\"); \n  }\n\n  return (\n    <React.Fragment>\n    <CirclesGame ref={canvasRef} setScore={setScore}/>\n    <AppBar position=\"static\" style={{ background: 'transparent', boxShadow: 'none'}}>\n      <Toolbar>\n      <IconButton edge=\"start\" className={classes.menuButton} color=\"primary\" aria-label=\"menu\">\n      <MenuIcon />\n    </IconButton>\n    <Typography variant=\"h6\" color=\"primary\"  className={classes.title}>\n      Cirlces\n    </Typography>\n    <Typography variant=\"h6\" color=\"primary\"  className={classes.score}>\n      Score: {score}\n    </Typography>\n    <Button variant=\"outlined\" color=\"primary\" onClick={handleRestart }> Restart Game</Button>\n      </Toolbar>\n    </AppBar>\n    </React.Fragment>\n  );\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n    overrides: {\n        MuiCssBaseline: {\n          '@global': {\n            body: {\n                width: '100%',\n                height: '100%',\n                margin: '0',\n            }\n          },\n        },\n      },\n});\n\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport theme from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}